{"version":3,"file":"react-phone-number-input-input.js","sources":["../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/util.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/extension.js","../node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/getNumberType_.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/IDD.js","../node_modules/libphonenumber-js/es6/RFC3966.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/libphonenumber-js/es6/getCountries.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/close braces.js","../node_modules/input-format/modules/template formatter.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/input control.js","../node_modules/input-format/modules/react/Input.js","../modules/inputValuePrefix.js","../modules/InputSmart.js","../modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../modules/libphonenumber/formatPhoneNumber.js","../modules/libphonenumber/isValidPhoneNumber.js","../modules/libphonenumber/isPossiblePhoneNumber.js","../modules/PhoneInput.js","../input/index.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport function mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from './tools/semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'getCountries',\n\t\tvalue: function getCountries() {\n\t\t\treturn Object.keys(this.metadata.countries).filter(function (_) {\n\t\t\t\treturn _ !== '001';\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when parsing\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormatting',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormatting() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nexport function isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\nexport default function cmp(a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n//# sourceMappingURL=semver-compare.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn '+';\n\t}\n\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar defaultOptions = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, defaultOptions, options);\n\t} else {\n\t\toptions = defaultOptions;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n\tif (useInternationalFormat) {\n\t\treturn changeInternationalFormatStyle(formattedNumber);\n\t}\n\n\treturn formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n\tvar format = choose_format_for_number(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n\tfor (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(national_number, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function changeInternationalFormatStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t\t}\n\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t}\n}\n//# sourceMappingURL=format_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parse_input = parse_input(text, options.v2),\n\t    formattedPhoneNumber = _parse_input.number,\n\t    ext = _parse_input.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formattedPhoneNumber) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, metadata),\n\t    country = _parsePhoneNumber.country,\n\t    nationalNumber = _parsePhoneNumber.nationalNumber,\n\t    countryCallingCode = _parsePhoneNumber.countryCallingCode,\n\t    carrierCode = _parsePhoneNumber.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\nexport function extract_formatted_phone_number(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn;\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n\tif (!number || !metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// In many countries the national prefix\n\t// is not just a constant digit (like `0` in UK)\n\t// but can be different depending on the phone number\n\t// (and can be also absent for some phone numbers).\n\t//\n\t// So `national_prefix_for_parsing` is used when parsing\n\t// a national-prefixed (local) phone number\n\t// into a national significant phone number\n\t// extracting that possible national prefix out of it.\n\t//\n\t// Example `national_prefix_for_parsing` for Australia (AU) is `0|(183[12])`.\n\t// Which means that in Australia the national prefix can be: `0`, `1831`, `1832`.\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn { number: number };\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// In more complex cases just `national_prefix_for_parsing` regexp\n\t// is not enough to extract the national number and then strip it\n\t// like `number.slice(national_prefix.length)` because when parsing\n\t// national numbers it's not always clear whether the first digits\n\t// are a national prefix or part of the national significant number.\n\t// For such cases `national_prefix_transform_rule` regexp is present\n\t// which contains \"capturing groups\" that are later used in such\n\t// `national_prefix_transform_rule` to transform the national number\n\t// being parsed into the national significant number.\n\t//\n\t// Example.\n\t// Country: U.S. Virgin Islands (VI).\n\t// Country calling code: +1.\n\t// Leading digits: 340.\n\t// Phone number format: +1 (340) xxx-xxxx.\n\t// National prefix: 1.\n\t// National prefix for parsing: 1|([2-9]\\d{6})$.\n\t// National prefix transform rule: 340$1.\n\t//\n\t// So for input \"13401234567\" \"national prefix for parsing\" regexp\n\t// will return \"1\" and the national significant number will be\n\t// \"13401234567\".slice(\"1\".length) === \"(340) 123-4567\".\n\t//\n\t// And for input \"3401234567\" \"national prefix for parsing\" regexp\n\t// the \"captured group\" will be \"3401234567\" and the national significant\n\t// number will be \"3401234567\".replace(\"340123\", \"340340123\") === \"(340) 3401234567\".\n\t//\n\t// `national_prefix_matcher[captured_groups_count]` means that\n\t// the corresponding \"captured group\" is not empty.\n\t// It can be empty if the regexp either doesn't have any \"capturing groups\"\n\t// or if the \"capturing groups\" are defined as optional.\n\t// Example: \"0?(?:...)?\" for Argentina.\n\t//\n\tvar captured_groups_count = national_prefix_matcher.length - 1;\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n\t}\n\t// If it's a simple-enough case then just strip the national prefix from the number.\n\telse {\n\t\t\t// National prefix is the whole substring matched by\n\t\t\t// the `national_prefix_for_parsing` regexp.\n\t\t\tvar national_prefix = national_prefix_matcher[0];\n\t\t\tnational_significant_number = number.slice(national_prefix.length);\n\t\t}\n\n\tvar carrierCode = void 0;\n\tif (captured_groups_count > 0) {\n\t\tcarrierCode = national_prefix_matcher[1];\n\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\n\t// {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: national_significant_number,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_calling_code` is always valid\n\tvar possible_countries = metadata.countryCallingCodes()[country_calling_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n\tmetadata = new Metadata(metadata);\n\n\tfor (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: national_phone_number, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parse_input(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\n\tvar number = extract_formatted_phone_number(text, v2);\n\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formattedPhoneNumber, defaultCountry, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t}\n\t// If `formattedPhoneNumber` is in \"national\" format\n\t// then `number` is defined and `countryCallingCode` isn't.\n\telse if (number && defaultCountry) {\n\t\t\tmetadata.country(defaultCountry);\n\t\t\tcountry = defaultCountry;\n\t\t\tcountryCallingCode = getCountryCallingCode(defaultCountry, metadata.metadata);\n\t\t} else return {};\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar _parseNationalNumber = parseNationalNumber(number, metadata),\n\t    nationalNumber = _parseNationalNumber.nationalNumber,\n\t    carrierCode = _parseNationalNumber.carrierCode;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = find_country_code(countryCallingCode, nationalNumber, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nfunction parseNationalNumber(number, metadata) {\n\tvar nationalNumber = parseIncompletePhoneNumber(number);\n\tvar carrierCode = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(nationalNumber, metadata),\n\t    potentialNationalNumber = _strip_national_prefi.number,\n\t    potentialCarrierCode = _strip_national_prefi.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (checkNumberLengthForType(potentialNationalNumber, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnationalNumber = potentialNationalNumber;\n\t\t\tcarrierCode = potentialCarrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnationalNumber: nationalNumber,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\n// Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parsePhoneNumber(number, null, metadata).country\n// }\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(text, options, metadata) {\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\n\nexport default function parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumber_(text, options, metadata);\n}\n\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\n\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn parsePhoneNumber(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\n\nexport default function parsePhoneNumberFromString() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode as _extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\n\nimport { checkNumberLengthForType } from './getNumberType_';\n\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = extract_formatted_phone_number(text) || '';\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n\t\t\t\treturn this.currentOutput;\n\t\t\t}\n\n\t\t\treturn this.processInput(parseIncompletePhoneNumber(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'processInput',\n\t\tvalue: function processInput(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsedInput) {\n\t\t\t\t\tthis.parsedInput += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.resetCountriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsedInput += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.nationalNumber += input;\n\n\t\t\t// TODO: Deprecated: rename `this.nationalNumber`\n\t\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.nationalNumber) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extractNationalPrefix();\n\n\t\t\t\tif (this.nationalPrefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = undefined;\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if (!this.shouldFormat())\n\t\t\t// {\n\t\t\t// \treturn this.format_as_non_formatted_number()\n\t\t\t// }\n\n\t\t\tif (!this.nationalNumber) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.formatNationalNumber(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.formatFullNumber(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.format_as_non_formatted_number();\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\t// Strip national prefix for incorrectly inputted international phones.\n\t\t\tif (this.isInternational() && this.countryCallingCode) {\n\t\t\t\treturn '+' + this.countryCallingCode + this.nationalNumber;\n\t\t\t}\n\n\t\t\treturn this.parsedInput;\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumber',\n\t\tvalue: function formatNationalNumber(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosenFormat) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.chooseAnotherFormat()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsedInput = '';\n\n\t\t\tthis.currentOutput = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tthis.nationalNumber = '';\n\t\t\tthis.carrierCode = '';\n\n\t\t\tthis.resetCountriness();\n\n\t\t\tthis.resetFormat();\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'resetCountry',\n\t\tvalue: function resetCountry() {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.country = undefined;\n\t\t\t} else {\n\t\t\t\tthis.country = this.defaultCountry;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetCountriness',\n\t\tvalue: function resetCountriness() {\n\t\t\tthis.resetCountry();\n\n\t\t\tif (this.defaultCountry && !this.isInternational()) {\n\t\t\t\tthis.metadata.country(this.defaultCountry);\n\t\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode();\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t} else {\n\t\t\t\tthis.metadata.country(undefined);\n\t\t\t\tthis.countryCallingCode = undefined;\n\n\t\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_calling_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_calling_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = this.metadata.formats().filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\n\t\t\tthis.matching_formats = undefined;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.nationalNumber;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digits patterns already match for a single first digit.\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\n\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\tvar available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n\t\t\tthis.had_enough_leading_digits = this.shouldFormat();\n\n\t\t\tthis.matching_formats = available_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_patterns_count = format.leadingDigitsPatterns().length;\n\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leading_digits_patterns_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n\t\t\t\tvar leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'shouldFormat',\n\t\tvalue: function shouldFormat() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Presumably the limitation of \"3 digits min\"\n\t\t\t// is imposed to exclude false matches,\n\t\t\t// e.g. when there are two different formats\n\t\t\t// each one fitting one or two leading digits being input.\n\t\t\t// But for this case I would propose a specific `if/else` condition.\n\t\t\t//\n\t\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// `leadingDigitsPattern` also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tfor (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n\t\t\t\tif (!matcher.test(this.nationalNumber)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\tvar formatted_number = format_national_number_using_format(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata);\n\n\t\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\n\t\t\t\t\tformatted_number = '1 ' + formatted_number;\n\t\t\t\t}\n\n\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t//\n\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t// with the current metadata,\n\t\t\t\t// but just in case.\n\t\t\t\t//\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\tvar full_number = this.formatFullNumber(formatted_number);\n\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t}\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'formatFullNumber',\n\t\tvalue: function formatFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = _extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\n\t\t\t// Sometimes people erroneously write national prefix\n\t\t\t// as part of an international number, e.g. +44 (0) ....\n\t\t\t// This violates the standards for international phone numbers,\n\t\t\t// so \"As You Type\" formatter assumes no national prefix\n\t\t\t// when parsing a phone number starting from `+`.\n\t\t\t// Even if it did attempt to filter-out that national prefix\n\t\t\t// it would look weird for a user trying to enter a digit\n\t\t\t// because from user's perspective the keyboard \"wouldn't be working\".\n\t\t\tthis.nationalNumber = number;\n\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata),\n\t\t\t    potential_national_number = _strip_national_prefi.number,\n\t\t\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n\t\t\tthis.nationalNumber = potential_national_number;\n\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseAnotherFormat',\n\t\tvalue: function chooseAnotherFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t// then extract the template from this format\n\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// No format matches the phone number,\n\t\t\t// therefore set `country` to `undefined`\n\t\t\t// (or to the default country).\n\t\t\tthis.resetCountry();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.resetFormat();\n\t\t}\n\t}, {\n\t\tkey: 'isFormatApplicable',\n\t\tvalue: function isFormatApplicable(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// If this format doesn't use national prefix\n\t\t\t// but the user did input national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format) {\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tnumber_pattern = number_pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.getFormatFormat(format);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumber : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\n\t\t\t\t\t// later in code.\n\t\t\t\t\tthis.chosenFormat = undefined;\n\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.parsedInput && this.parsedInput[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn changeInternationalFormatStyle(format.internationalFormat());\n\t\t\t}\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix()) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n\t\t\t\t\treturn '1 ' + format.format();\n\t\t\t\t}\n\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!this.countryCallingCode || !this.nationalNumber) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\n\t\t// This method is still used in `react-phone-number-input/source/input-control.js`.\n\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar index = -1;\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < this.parsedInput.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn cut_stripping_dangling_braces(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function strip_dangling_braces(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\n\treturn cleared_string;\n}\n\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n\tif (string[cut_before_index] === ')') {\n\t\tcut_before_index++;\n\t}\n\treturn strip_dangling_braces(string.slice(0, cut_before_index));\n}\n\nexport function close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","import Metadata from './metadata';\n\nexport default function getCountries(metadata) {\n\treturn new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parse;\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = edit;\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.count_occurences = count_occurences;\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes)\n\t// but template placeholder characters don't fall into that range\n\t// so skipping such miscellaneous \"exotic\" characters\n\t// won't matter here for just counting placeholder character occurrences.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = close_braces;\n\nvar _helpers = require('./helpers');\n\nfunction close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = (0, _helpers.count_occurences)('(', retained_template);\n\tvar closing_braces = (0, _helpers.count_occurences)(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\t// Using `.split('')` here instead of normal `for ... of`\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t\t// (the ones consisting of four bytes)\n\t\t// but template placeholder characters don't fall into that range\n\t\t// and appending UTF-8 characters to a string in parts still works.\n\t\tfor (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\tvar _ref;\n\n\t\t\tif (_isArray) {\n\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif (_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar character = _ref;\n\n\t\t\tif (character !== placeholder) {\n\t\t\t\tfilled_in_template += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfilled_in_template += value[value_character_index];\n\t\t\tvalue_character_index++;\n\n\t\t\t// If the last available value character has been filled in,\n\t\t\t// then return the filled in template\n\t\t\t// (either trim the right part or retain it,\n\t\t\t//  if no more character placeholders in there)\n\t\t\tif (value_character_index === value.length) {\n\t\t\t\t// If there are more character placeholders\n\t\t\t\t// in the right part of the template\n\t\t\t\t// then simply trim it.\n\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = (0, _closeBraces2.default)(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n};\n\nvar _helpers = require('./helpers');\n\nvar _closeBraces = require('./close braces');\n\nvar _closeBraces2 = _interopRequireDefault(_closeBraces);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=template formatter.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = format;\n\nvar _templateFormatter = require('./template formatter');\n\nvar _templateFormatter2 = _interopRequireDefault(_templateFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nfunction format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = (0, _templateFormatter2.default)(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getSelection = getSelection;\nexports.getOperation = getOperation;\nexports.getCaretPosition = getCaretPosition;\nexports.setCaretPosition = setCaretPosition;\n// Gets <input/> selection bounds\nfunction getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nvar Keys = exports.Keys = {\n\tBackspace: 8,\n\tDelete: 46\n\n\t// Finds out the operation to be intercepted and performed\n\t// based on the key down event `keyCode`.\n};function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nfunction getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nfunction setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position.\n\t// There has been an issue with caret positioning on Android devices.\n\t// https://github.com/catamphetamine/input-format/issues/2\n\t// I was revisiting this issue and looked for similar issues in other libraries.\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n\t// https://github.com/text-mask/text-mask/issues/300\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n\t// https://github.com/text-mask/text-mask/pull/400/files\n\t// I've implemented the same workaround here.\n\tif (isAndroid()) {\n\t\tsetTimeout(function () {\n\t\t\treturn element.setSelectionRange(caret_position, caret_position);\n\t\t}, 0);\n\t} else {\n\t\telement.setSelectionRange(caret_position, caret_position);\n\t}\n}\n\nfunction isAndroid() {\n\t// `navigator` is not defined when running mocha tests.\n\tif (typeof navigator !== 'undefined') {\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n\t}\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.onCut = onCut;\nexports.onPaste = onPaste;\nexports.onChange = onChange;\nexports.onKeyDown = onKeyDown;\n\nvar _edit = require('./edit');\n\nvar _edit2 = _interopRequireDefault(_edit);\n\nvar _parse3 = require('./parse');\n\nvar _parse4 = _interopRequireDefault(_parse3);\n\nvar _format2 = require('./format');\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _dom = require('./dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction onCut(event, input, _parse, _format, on_change) {\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(function () {\n\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t}, 0);\n}\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n\tvar selection = (0, _dom.getSelection)(input);\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection) {\n\t\terase_selection(input, selection);\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\nfunction onChange(event, input, _parse, _format, on_change) {\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nfunction onKeyDown(event, input, _parse, _format, on_change) {\n\tvar operation = (0, _dom.getOperation)(event);\n\n\tswitch (operation) {\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault();\n\n\t\t\tvar selection = (0, _dom.getSelection)(input);\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection) {\n\t\t\t\terase_selection(input, selection);\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change);\n\n\t\tdefault:\n\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\nfunction erase_selection(input, selection) {\n\tvar text = input.value;\n\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\tinput.value = text;\n\t(0, _dom.setCaretPosition)(input, selection.start);\n}\n\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tvar _parse2 = (0, _parse4.default)(input.value, (0, _dom.getCaretPosition)(input), _parse),\n\t    value = _parse2.value,\n\t    caret = _parse2.caret;\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\n\n\tif (operation) {\n\t\tvar operation_applied = (0, _edit2.default)(value, caret, operation);\n\n\t\tvalue = operation_applied.value;\n\t\tcaret = operation_applied.caret;\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tvar formatted = (0, _format3.default)(value, caret, _format);\n\n\tvar text = formatted.text;\n\tcaret = formatted.caret;\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text;\n\t// Position the caret properly.\n\t(0, _dom.setCaretPosition)(input, caret);\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value);\n}\n//# sourceMappingURL=input control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('../parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('../input control');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // This is just `./ReactInput.js` rewritten in Hooks.\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nfunction Input(_ref, ref) {\n\tvar value = _ref.value,\n\t    parse = _ref.parse,\n\t    format = _ref.format,\n\t    InputComponent = _ref.inputComponent,\n\t    onChange = _ref.onChange,\n\t    onCut = _ref.onCut,\n\t    onPaste = _ref.onPaste,\n\t    onKeyDown = _ref.onKeyDown,\n\t    rest = _objectWithoutProperties(_ref, ['value', 'parse', 'format', 'inputComponent', 'onChange', 'onCut', 'onPaste', 'onKeyDown']);\n\n\tvar ownRef = (0, _react.useRef)();\n\tref = ref || ownRef;\n\tvar _onChange = (0, _react.useCallback)(function (event) {\n\t\treturn (0, _inputControl.onChange)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange]);\n\n\tvar _onPaste = (0, _react.useCallback)(function (event) {\n\t\tif (onPaste) {\n\t\t\tonPaste(event);\n\t\t}\n\t\treturn (0, _inputControl.onPaste)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onPaste]);\n\n\tvar _onCut = (0, _react.useCallback)(function (event) {\n\t\tif (onCut) {\n\t\t\tonCut(event);\n\t\t}\n\t\treturn (0, _inputControl.onCut)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onCut]);\n\n\tvar _onKeyDown = (0, _react.useCallback)(function (event) {\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t\treturn (0, _inputControl.onKeyDown)(event, ref.current, parse, format, onChange);\n\t}, [ref, parse, format, onChange, onKeyDown]);\n\n\treturn _react2.default.createElement(InputComponent, _extends({}, rest, {\n\t\tref: ref,\n\t\tvalue: format(isEmptyValue(value) ? '' : value).text,\n\t\tonKeyDown: _onKeyDown,\n\t\tonChange: _onChange,\n\t\tonPaste: _onPaste,\n\t\tonCut: _onCut }));\n}\n\nInput = _react2.default.forwardRef(Input);\n\nInput.propTypes = {\n\t// Parses a single characher of `<input/>` text.\n\tparse: _propTypes2.default.func.isRequired,\n\n\t// Formats `value` into `<input/>` text.\n\tformat: _propTypes2.default.func.isRequired,\n\n\t// Renders `<input/>` by default.\n\tinputComponent: _propTypes2.default.elementType.isRequired,\n\n\t// `<input/>` `type` attribute.\n\ttype: _propTypes2.default.string.isRequired,\n\n\t// Is parsed from <input/> text.\n\tvalue: _propTypes2.default.string,\n\n\t// This handler is called each time `<input/>` text is changed.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// Passthrough\n\tonKeyDown: _propTypes2.default.func,\n\tonCut: _propTypes2.default.func,\n\tonPaste: _propTypes2.default.func\n};\n\nInput.defaultProps = {\n\t// Renders `<input/>` by default.\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute.\n\ttype: 'text'\n};\n\nexports.default = Input;\n\n\nfunction isEmptyValue(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(country, international, metadata) {\n  return country && international ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}\n//# sourceMappingURL=inputValuePrefix.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\n\nexport function createInput(defaultMetadata) {\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix(country, international, metadata); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();\n//# sourceMappingURL=InputSmart.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix(country, international, metadata);\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}\n//# sourceMappingURL=InputBasic.js.map","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/core';\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}\n//# sourceMappingURL=formatPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isValidPhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isValid();\n}\n//# sourceMappingURL=isValidPhoneNumber.js.map","import { parsePhoneNumberFromString } from 'libphonenumber-js/core';\nexport default function isPossiblePhoneNumber(value, metadata) {\n  if (!value) {\n    return false;\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return false;\n  }\n\n  return phoneNumber.isPossible();\n}\n//# sourceMappingURL=isPossiblePhoneNumber.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nexport function createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var country = _ref.country,\n        defaultCountry = _ref.defaultCountry,\n        useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n        value = _ref.value,\n        onChange = _ref.onChange,\n        metadata = _ref.metadata,\n        smartCaret = _ref.smartCaret,\n        international = _ref.international,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"smartCaret\", \"international\"]);\n\n    var getInitialParsedInput = function getInitialParsedInput() {\n      return getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata);\n    }; // This is only used to detect `country` property change.\n\n\n    var _useState = useState(country),\n        _useState2 = _slicedToArray(_useState, 2),\n        prevCountry = _useState2[0],\n        setPrevCountry = _useState2[1]; // This is only used to detect `defaultCountry` property change.\n\n\n    var _useState3 = useState(defaultCountry),\n        _useState4 = _slicedToArray(_useState3, 2),\n        prevDefaultCountry = _useState4[0],\n        setPrevDefaultCountry = _useState4[1]; // `parsedInput` is the `value` passed to the `<input/>`.\n\n\n    var _useState5 = useState(getInitialParsedInput()),\n        _useState6 = _slicedToArray(_useState5, 2),\n        parsedInput = _useState6[0],\n        setParsedInput = _useState6[1]; // This is only used to detect `value` property changes.\n\n\n    var _useState7 = useState(value),\n        _useState8 = _slicedToArray(_useState7, 2),\n        valueForParsedInput = _useState8[0],\n        setValueForParsedInput = _useState8[1]; // If `value` property has been changed externally\n    // then re-initialize the component.\n\n\n    useEffect(function () {\n      if (value !== valueForParsedInput) {\n        setValueForParsedInput(value);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [value]); // If the `country` has been changed then re-initialize the component.\n\n    useEffect(function () {\n      if (country !== prevCountry) {\n        setPrevCountry(country);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [country]); // If the `defaultCountry` has been changed then re-initialize the component.\n\n    useEffect(function () {\n      if (defaultCountry !== prevDefaultCountry) {\n        setPrevDefaultCountry(defaultCountry);\n        setParsedInput(getInitialParsedInput());\n      }\n    }, [defaultCountry]); // Update the `value` after `valueForParsedInput` has been updated.\n\n    useEffect(function () {\n      if (valueForParsedInput !== value) {\n        onChange(valueForParsedInput);\n      }\n    }, [valueForParsedInput]);\n    var onParsedInputChange = useCallback(function (parsedInput) {\n      var value;\n\n      if (country) {\n        // Won't allow `+` in the beginning\n        // when a `country` has been specified.\n        if (parsedInput && parsedInput[0] === '+') {\n          parsedInput = parsedInput.slice(1);\n        }\n      } else if (!defaultCountry) {\n        // Force a `+` in the beginning of a `value`\n        // when no `country` and `defaultCountry` have been specified.\n        if (parsedInput && parsedInput[0] !== '+') {\n          parsedInput = '+' + parsedInput;\n        }\n      } // Convert `parsedInput` to `value`.\n\n\n      if (parsedInput) {\n        var asYouType = new AsYouType(country || defaultCountry, metadata);\n        asYouType.input(country && international ? \"+\".concat(getCountryCallingCode(country, metadata)).concat(parsedInput) : parsedInput);\n        var phoneNumber = asYouType.getNumber(); // If it's a \"possible\" incomplete phone number.\n\n        if (phoneNumber) {\n          value = phoneNumber.number;\n        }\n      }\n\n      setParsedInput(parsedInput);\n      setValueForParsedInput(value);\n    }, [country, international, defaultCountry, metadata, setParsedInput, setValueForParsedInput]);\n    var InputComponent = smartCaret ? InputSmart : InputBasic;\n    return React.createElement(InputComponent, _extends({}, rest, {\n      ref: ref,\n      metadata: metadata,\n      international: international,\n      country: country || defaultCountry,\n      value: parsedInput,\n      onChange: onParsedInputChange\n    }));\n  }\n\n  PhoneInput = React.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: PropTypes.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: PropTypes.string,\n\n    /**\r\n     * The phone number (in E.164 format).\r\n     * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n     */\n    value: PropTypes.string,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (example: `(213) 373-4253`),\r\n     * or as an international phone number without \"country calling code\"\r\n     * if `international` property is passed (example: `213 373 4253`).\r\n     * Example: \"US\".\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (example: `+1 213 373 4253`)\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n     * The user can still input a phone number in international format.\r\n     * Example: \"US\".\r\n     * `country` and `defaultCountry` properties are mutually exclusive.\r\n     */\n    defaultCountry: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: PropTypes.bool.isRequired,\n\n    /**\r\n     * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n     * then the `value` will be formatted as a national phone number by default.\r\n     * To format the initial `value` of `defaultCountry` as an international number instead\r\n     * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n     */\n    useNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * Set to `true` to force international phone number format\r\n     * (without \"country calling code\") when `country` is specified.\r\n     */\n    // international: false,\n\n    /**\r\n     * Prefer national format when formatting E.164 phone number `value`\r\n     * corresponding to `defaultCountry`.\r\n     */\n    useNationalFormatForDefaultCountryValue: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\nexport default createInput();\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nfunction getParsedInputForValue(value, country, international, defaultCountry, useNationalFormatForDefaultCountryValue, metadata) {\n  if (!value) {\n    return '';\n  }\n\n  if (!country && !defaultCountry) {\n    return value;\n  }\n\n  var asYouType = new AsYouType(undefined, metadata);\n  asYouType.input(value);\n  var phoneNumber = asYouType.getNumber();\n\n  if (phoneNumber) {\n    if (country) {\n      if (phoneNumber.country && phoneNumber.country !== country) {\n        console.error(\"[react-phone-number-input] Phone number \".concat(value, \" corresponds to country \").concat(phoneNumber.country, \" but \").concat(country, \" was specified instead.\"));\n      }\n\n      if (international) {\n        return phoneNumber.nationalNumber;\n      }\n\n      return parseDigits(phoneNumber.formatNational());\n    } else {\n      if (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\n        return parseDigits(phoneNumber.formatNational());\n      }\n\n      return value;\n    }\n  } else {\n    return '';\n  }\n}\n//# sourceMappingURL=PhoneInput.js.map","import metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode\r\n} from '../core/index'\r\n\r\nimport { createInput } from '../modules/PhoneInput'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}"],"names":["ParseError","code","instance","Constructor","TypeError","_classCallCheck","this","name","constructor","message","stack","Error","prototype","Object","create","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","matchesEntirely","text","arguments","length","undefined","regular_expression","RegExp","test","_typeof","Symbol","iterator","obj","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","V3","Metadata","metadata","is_object","countries","country_calling_codes","country_phone_code_to_countries","keys","join","type_of","validateMetadata","v1","version","v2","a","b","pa","split","pb","na","Number","nb","isNaN","compare","v3","value","filter","_","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","_this","formats","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","getType","Type","country_calling_code","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","replace","type","possibleLengths","getCountryCallingCode","RFC3966_EXTN_PREFIX","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","character","parseDigits","string","result","_iterator","_isArray","Array","isArray","_i","_ref","next","done","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","nationalNumber","phone","nationalNumberPattern","is_of_type","pattern","indexOf","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","slice","element","push","sort","mergeArrays","actual_length","minimum_length","is_possible_number","national_number","is_international","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","_slicedToArray","arr","_arr","_n","_d","_e","_s","err","sliceIterator","_extends","assign","source","hasOwnProperty","call","defaultOptions","formatExtension","formattedNumber","extension","ext","formatNumber","chooseCountryByCountryCallingCode","addExtension","format_national_number","_ref2","formatRFC3966","fromCountry","IDDPrefix","countryMetadata","defaultIDDPrefix","getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","internationalFormat","changeInternationalFormatStyle","format_as","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","search","choose_format_for_number","local","trim","PhoneNumber","isCountryCode","_metadata","isPossibleNumber","isValidNumber","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","defaultCountry","_parse_input","_part$split","_part$split2","parseRFC3966","extract_formatted_phone_number","with_extension_stripped","start","number_without_extension","matches","match","extractExtension","parse_input","formattedPhoneNumber","_parsePhoneNumber","_extractCountryCallin","extractCountryCallingCode","_parseNationalNumber","carrierCode","_strip_national_prefi","strip_national_prefix_and_carrier_code","potentialNationalNumber","potentialCarrierCode","parseNationalNumber","exactCountry","find_country_code","parsePhoneNumber","selectedCountry","phoneNumber","valid","extended","possible","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_prefix","national_phone_number","possible_countries","leadingDigits","_find_country_code","numberWithoutIDD","IDDPrefixPattern","matchedGroups","stripIDDPrefix","isObject","parsePhoneNumberFromString","isSupportedCountry","parseNumber","error","_normalizeArguments","args","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","normalizeArguments","parsePhoneNumberFromString_","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","reset","extracted_number","processInput","currentOutput","parsedInput","resetCountriness","isInternational","determineTheCountry","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","template","partially_populated_template","last_match_position","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","Math","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","_extractCountryCallingCode","potential_national_number","_iterator2","_isArray2","_i2","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","_ref3","cut_stripping_dangling_braces","index","cut_before_index","dangling_braces","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","strip_dangling_braces","times","getCountries","exports","caret_position","parse_character","focused_input_character_index","caret","operation","symbol","count","retained_template","placeholder","empty_placeholder","cut_before","opening_braces","_helpers","count_occurences","closing_braces","should_close_braces","characters_in_template","value_character_index","filled_in_template","_closeBraces2","default","_closeBraces","__esModule","formatter","_templateFormatter2","found","possibly_last_input_character_index","_templateFormatter","selectionStart","selectionEnd","end","event","keyCode","Keys","Backspace","Delete","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","setTimeout","_parse","on_change","format_input_text","selection","_dom","getSelection","erase_selection","getOperation","preventDefault","_edit2","_interopRequireDefault","_edit","_parse4","_parse3","_format3","_format2","setCaretPosition","_parse2","getCaretPosition","operation_applied","formatted","_react2","_react","_propTypes2","_propTypes","Input","ref","InputComponent","inputComponent","onChange","onCut","onPaste","onKeyDown","rest","_objectWithoutProperties","ownRef","useRef","_onChange","useCallback","_inputControl","current","_onPaste","_onCut","_onKeyDown","createElement","isEmptyValue","forwardRef","propTypes","func","isRequired","elementType","defaultProps","getInputValuePrefix","international","concat","removeInputValuePrefix","prefix","apply","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","defaultMetadata","InputSmart","getTemplate","React","PropTypes","bool","object","createInput","InputBasic","newValue","formatIncompletePhoneNumber","formatPhoneNumber","formatPhoneNumberIntl","isValidPhoneNumber","isValid","isPossiblePhoneNumber","isPossible","_arrayWithHoles","toString","_iterableToArrayLimit","_nonIterableRest","PhoneInput","useNationalFormatForDefaultCountryValue","smartCaret","getInitialParsedInput","asYouType","getNumber","console","formatNational","getParsedInputForValue","_useState2","useState","prevCountry","setPrevCountry","_useState4","prevDefaultCountry","setPrevDefaultCountry","_useState6","setParsedInput","_useState8","valueForParsedInput","setValueForParsedInput","useEffect","onParsedInputChange","autoComplete","_arguments","_formatPhoneNumber","_formatPhoneNumberIntl","_getCountries","_getCountryCallingCode","_isPossiblePhoneNumber","_isValidPhoneNumber"],"mappings":"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"}