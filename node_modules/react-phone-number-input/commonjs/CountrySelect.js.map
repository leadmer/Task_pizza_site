{"version":3,"sources":["../source/CountrySelect.js"],"names":["CountrySelect","value","onChange","options","className","Icon","iconComponent","getIconAspectRatio","Arrow","arrowComponent","unicodeFlags","rest","onChange_","event","target","undefined","selectedOption","option","divider","map","label","propTypes","PropTypes","string","func","isRequired","arrayOf","shape","bool","elementType","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode'\r\n\r\nexport default function CountrySelect({\r\n\tvalue,\r\n\tonChange,\r\n\toptions,\r\n\tclassName,\r\n\ticonComponent: Icon,\r\n\tgetIconAspectRatio,\r\n\tarrowComponent: Arrow,\r\n\tunicodeFlags,\r\n\t...rest\r\n}) {\r\n\tconst onChange_ = useCallback((event) => {\r\n\t\tconst value = event.target.value\r\n\t\tonChange(value === 'ZZ' ? undefined : value)\r\n\t}, [onChange])\r\n\r\n\tconst selectedOption = useMemo(() => {\r\n\t\tfor (const option of options) {\r\n\t\t\tif (!option.divider && option.value === value) {\r\n\t\t\t\treturn option\r\n\t\t\t}\r\n\t\t}\r\n\t}, [options, value])\r\n\r\n\t// \"ZZ\" means \"International\".\r\n\t// (HTML requires each `<option/>` have some string `value`).\r\n\treturn (\r\n\t\t<div className=\"PhoneInputCountry\">\r\n\t\t\t<select\r\n\t\t\t\t{...rest}\r\n\t\t\t\tvalue={value || 'ZZ'}\r\n\t\t\t\tonChange={onChange_}\r\n\t\t\t\tclassName=\"PhoneInputCountrySelect\">\r\n\t\t\t\t{options.map(({ value, label, divider }) => (\r\n\t\t\t\t\t<option\r\n\t\t\t\t\t\tkey={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\t\tvalue={divider ? '|' : value || 'ZZ'}\r\n\t\t\t\t\t\tdisabled={divider ? true : false}\r\n\t\t\t\t\t\tclassName={divider ? 'PhoneInputCountrySelectDivider' : undefined}>\r\n\t\t\t\t\t\t{label}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\r\n\t\t\t{/* Either a Unicode flag icon. */}\r\n\t\t\t{(unicodeFlags && value) &&\r\n\t\t\t\t<div className=\"PhoneInputCountryIconUnicode\">\r\n\t\t\t\t\t{getUnicodeFlagIcon(value)}\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t\t{/* Or an SVG flag icon. */}\r\n\t\t\t{!(unicodeFlags && value) &&\r\n\t\t\t\t<Icon\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tlabel={selectedOption && selectedOption.label}\r\n\t\t\t\t\taspectRatio={unicodeFlags ? 1 : undefined}/>\r\n\t\t\t}\r\n\r\n\t\t\t<Arrow/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCountrySelect.propTypes = {\r\n\t// A two-letter country code.\r\n\t// E.g. \"US\", \"RU\", etc.\r\n\tvalue: PropTypes.string,\r\n\r\n\t// Updates the `value`.\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t// `<select/>` options.\r\n\toptions: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tvalue: PropTypes.string,\r\n\t\tlabel: PropTypes.string,\r\n\t\tdivider : PropTypes.bool\r\n\t})).isRequired,\r\n\r\n\t// Country flag component.\r\n\ticonComponent: PropTypes.elementType,\r\n\r\n\t// Select arrow component.\r\n\tarrowComponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Set to `true` to render Unicode flag icons instead of SVG images.\r\n\tunicodeFlags: PropTypes.bool\r\n}\r\n\r\nCountrySelect.defaultProps = {\r\n\t// Is \"International\" icon square?\r\n\tarrowComponent: () => <div className=\"PhoneInputCountrySelectArrow\"/>\r\n}\r\n"],"file":"CountrySelect.js"}